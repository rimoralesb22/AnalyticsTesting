Errores[i] <- sum(kmeans(Clientes4[1:3], centers=i)$withinss)
}
plot(1:K_Max, Errores, type="b",
xlab="Cantidad de Cluster",
ylab="Suma de error")
Algoritmos         <-c("Hartigan-Wong","Lloyd","Forgy","MacQueen")
CantidadAlgoritmos <-length(Algoritmos) # guarda la cantidad de algoritmos usados
Iteraciones        <-data.frame(Intraclase=numeric(),Algoritmo=character())
for (i in 1:CantidadAlgoritmos)
{
for (ii in 1:100)
{
Modelo      <- kmeans(Clientes4[1:3],4, algorithm = Algoritmos[i])
Iteraciones <- rbind(Iteraciones,
data.frame(Intraclase = Modelo$betweenss,
Algoritmo = Algoritmos[i]))
}
}
Resultados       <- tapply(Iteraciones$Intraclase,Iteraciones$Algoritmo,mean)
Resultados       <-sort(Resultados,decreasing = T)
AlgoritmoGanador <-names(Resultados[1])
KmeansOptimizado <- kmeans(Clientes4[1:3],4, algorithm = AlgoritmoGanador)
Clientes4$Grupo   <-KmeansOptimizado$cluster
plot(Clientes4$TOTALCAMPANAS,Clientes4$GANACIA,col=Clientes4$Grupo,cex.axis=.7,cex.lab=.7)
text(Clientes4$TOTALCAMPANAS,Clientes4$GANACIA,
labels=Clientes4$CUENTA,pos=1,col=Clientes4$Grupo,cex=.7)
title(main=paste("Algoritmo ganador:",AlgoritmoGanador),cex.main=.9)
write.csv(Clientes4,"C:/Users/isalopez/Desktop/ganancia_optimizado_4Clusters_sample.csv")
write.csv(Clientes4,"C:/Users/isalopez/Desktop/ganancia_optimizado_4Clusters_sample.csv")
##Quitar los outliers de la poblacion
Clientes <- remove_outliers(ClientesTot)
#head(Clientes3)
#Sacar la muestra
Clientes2 <- sample_n(na.omit(Clientes), 1000)
#Estandarizar y Escalar las variables y centrar
GananciaE = scale(Clientes2[,2], center = TRUE, scale = TRUE)
TotCampE = scale(Clientes2[,3], center = TRUE, scale = TRUE)
PartE = scale(Clientes2[,4], center = TRUE, scale = TRUE)
ClientesTot = read.csv("Valor_clientes.csv")
ClientesTot$CUENTA <- gsub(",","",ClientesTot$CUENTA)
ClientesTot$GANACIA <- gsub(",","",ClientesTot$GANACIA)
ClientesTot$TOTALCAMPANAS <- gsub(",","",ClientesTot$TOTALCAMPANAS)
ClientesTot$PARTICIPACION <- gsub(",","",ClientesTot$PARTICIPACION)
ClientesTot$GANACIA <- as.numeric(ClientesTot$GANACIA)
ClientesTot$TOTALCAMPANAS <- as.numeric(ClientesTot$TOTALCAMPANAS)
ClientesTot$PARTICIPACION <- as.numeric(ClientesTot$PARTICIPACION)
Clientes <- remove_outliers(ClientesTot)
ClientesTot$CUENTA <- as.numeric(ClientesTot$CUENTA)
Clientes <- remove_outliers(ClientesTot)
source('utils.R')
# install the xlsx package, if needed
# and load it into memory
ensure.loaded("dplyr")
ensure.loaded("cluster")
#Kmeans
remove_outliers <- function(x, na.rm = TRUE, ...) {
qnt <- quantile(x, probs=c(.01, .99), na.rm = na.rm, ...)
H <- 1.5 * IQR(x, na.rm = na.rm)
y <- x
y[x < (qnt[1] - H)] <- NA
y[x > (qnt[2] + H)] <- NA
y
}
ClientesTot = read.csv("Valor_clientes.csv")
ClientesTot$CUENTA <- gsub(",","",ClientesTot$CUENTA)
ClientesTot$GANACIA <- gsub(",","",ClientesTot$GANACIA)
ClientesTot$TOTALCAMPANAS <- gsub(",","",ClientesTot$TOTALCAMPANAS)
ClientesTot$PARTICIPACION <- gsub(",","",ClientesTot$PARTICIPACION)
ClientesTot$CUENTA <- as.numeric(ClientesTot$CUENTA)
ClientesTot$GANACIA <- as.numeric(ClientesTot$GANACIA)
ClientesTot$TOTALCAMPANAS <- as.numeric(ClientesTot$TOTALCAMPANAS)
ClientesTot$PARTICIPACION <- as.numeric(ClientesTot$PARTICIPACION)
Clientes2 = scale(ClientesTot[2:4], center = TRUE, scale = TRUE)
Clientes3 <- remove_outliers(Clientes2)
Clientes5 <- cbind(Clientes3,CUENTA=ClientesTot$CUENTA,GANANCIAREAL=ClientesTot$GANACIA,CAMAPANASREAL=ClientesTot$TOTALCAMPANAS,PARTICIPACIONREAL=ClientesTot$PARTICIPACION)
Clientes5 <- data.frame(Clientes5)
Clientes4 <- sample_n(na.omit(Clientes5), 1000)
Errores <-NULL
K_Max   <-9
for (i in 1:K_Max)
{
Errores[i] <- sum(kmeans(Clientes4[1:3], centers=i)$withinss)
}
plot(1:K_Max, Errores, type="b",
xlab="Cantidad de Cluster",
ylab="Suma de error")
Algoritmos         <-c("Hartigan-Wong","Lloyd","Forgy","MacQueen")
CantidadAlgoritmos <-length(Algoritmos) # guarda la cantidad de algoritmos usados
Iteraciones        <-data.frame(Intraclase=numeric(),Algoritmo=character())
for (i in 1:CantidadAlgoritmos)
{
for (ii in 1:100)
{
Modelo      <- kmeans(Clientes4[1:3],4, algorithm = Algoritmos[i])
Iteraciones <- rbind(Iteraciones,
data.frame(Intraclase = Modelo$betweenss,
Algoritmo = Algoritmos[i]))
}
}
Resultados       <- tapply(Iteraciones$Intraclase,Iteraciones$Algoritmo,mean)
Resultados       <-sort(Resultados,decreasing = T)
AlgoritmoGanador <-names(Resultados[1])
KmeansOptimizado <- kmeans(Clientes4[1:3],4, algorithm = AlgoritmoGanador)
Clientes4$Grupo   <-KmeansOptimizado$cluster
plot(Clientes4$TOTALCAMPANAS,Clientes4$GANACIA,col=Clientes4$Grupo,cex.axis=.7,cex.lab=.7)
text(Clientes4$TOTALCAMPANAS,Clientes4$GANACIA,
labels=Clientes4$CUENTA,pos=1,col=Clientes4$Grupo,cex=.7)
title(main=paste("Algoritmo ganador:",AlgoritmoGanador),cex.main=.9)
write.csv(Clientes4,"C:/Users/isalopez/Desktop/ganancia_optimizado_4Clusters_sample.csv")
remove_outliers <- function(x, na.rm = TRUE, ...) {
qnt <- quantile(x, probs=c(.001, .999), na.rm = na.rm, ...)
H <- 1.5 * IQR(x, na.rm = na.rm)
y <- x
y[x < (qnt[1] - H)] <- NA
y[x > (qnt[2] + H)] <- NA
y
}
ClientesTot = read.csv("Valor_clientes.csv")
ClientesTot$CUENTA <- gsub(",","",ClientesTot$CUENTA)
ClientesTot$GANACIA <- gsub(",","",ClientesTot$GANACIA)
ClientesTot$TOTALCAMPANAS <- gsub(",","",ClientesTot$TOTALCAMPANAS)
ClientesTot$PARTICIPACION <- gsub(",","",ClientesTot$PARTICIPACION)
ClientesTot$CUENTA <- as.numeric(ClientesTot$CUENTA)
ClientesTot$GANACIA <- as.numeric(ClientesTot$GANACIA)
ClientesTot$TOTALCAMPANAS <- as.numeric(ClientesTot$TOTALCAMPANAS)
ClientesTot$PARTICIPACION <- as.numeric(ClientesTot$PARTICIPACION)
Clientes2 = scale(ClientesTot[2:4], center = TRUE, scale = TRUE)
Clientes3 <- remove_outliers(Clientes2)
Clientes5 <- cbind(Clientes3,CUENTA=ClientesTot$CUENTA,GANANCIAREAL=ClientesTot$GANACIA,CAMAPANASREAL=ClientesTot$TOTALCAMPANAS,PARTICIPACIONREAL=ClientesTot$PARTICIPACION)
Clientes5 <- data.frame(Clientes5)
Clientes4 <- sample_n(na.omit(Clientes5), 1000)
Errores <-NULL
K_Max   <-9
for (i in 1:K_Max)
{
Errores[i] <- sum(kmeans(Clientes4[1:3], centers=i)$withinss)
}
Clientes4 <- sample_n(na.omit(Clientes5), 10000)
Errores <-NULL
K_Max   <-9
for (i in 1:K_Max)
{
Errores[i] <- sum(kmeans(Clientes4[1:3], centers=i)$withinss)
}
plot(1:K_Max, Errores, type="b",
xlab="Cantidad de Cluster",
ylab="Suma de error")
Algoritmos         <-c("Hartigan-Wong","Lloyd","Forgy","MacQueen")
CantidadAlgoritmos <-length(Algoritmos) # guarda la cantidad de algoritmos usados
Iteraciones        <-data.frame(Intraclase=numeric(),Algoritmo=character())
for (i in 1:CantidadAlgoritmos)
{
for (ii in 1:100)
{
Modelo      <- kmeans(Clientes4[1:3],4, algorithm = Algoritmos[i])
Iteraciones <- rbind(Iteraciones,
data.frame(Intraclase = Modelo$betweenss,
Algoritmo = Algoritmos[i]))
}
}
Resultados       <- tapply(Iteraciones$Intraclase,Iteraciones$Algoritmo,mean)
Resultados       <-sort(Resultados,decreasing = T)
AlgoritmoGanador <-names(Resultados[1])
KmeansOptimizado <- kmeans(Clientes4[1:3],4, algorithm = AlgoritmoGanador)
Clientes4$Grupo   <-KmeansOptimizado$cluster
plot(Clientes4$TOTALCAMPANAS,Clientes4$GANACIA,col=Clientes4$Grupo,cex.axis=.7,cex.lab=.7)
text(Clientes4$TOTALCAMPANAS,Clientes4$GANACIA,
labels=Clientes4$CUENTA,pos=1,col=Clientes4$Grupo,cex=.7)
title(main=paste("Algoritmo ganador:",AlgoritmoGanador),cex.main=.9)
write.csv(Clientes4,"C:/Users/isalopez/Desktop/ganancia_optimizado_4Clusters_sample.csv")
write.csv(Clientes4,"C:/Users/isalopez/Desktop/ganancia_optimizado_4Clusters_sample.csv")
Clientes2 = scale(ClientesTot[2:4], center = FALSE, scale = TRUE)
Clientes3 <- remove_outliers(Clientes2)
Clientes5 <- cbind(Clientes3,CUENTA=ClientesTot$CUENTA,GANANCIAREAL=ClientesTot$GANACIA,CAMAPANASREAL=ClientesTot$TOTALCAMPANAS,PARTICIPACIONREAL=ClientesTot$PARTICIPACION)
Clientes5 <- data.frame(Clientes5)
Clientes4 <- sample_n(na.omit(Clientes5), 10000)
Errores <-NULL
K_Max   <-9
for (i in 1:K_Max)
{
Errores[i] <- sum(kmeans(Clientes4[1:3], centers=i)$withinss)
}
plot(1:K_Max, Errores, type="b",
xlab="Cantidad de Cluster",
ylab="Suma de error")
Algoritmos         <-c("Hartigan-Wong","Lloyd","Forgy","MacQueen")
CantidadAlgoritmos <-length(Algoritmos) # guarda la cantidad de algoritmos usados
Iteraciones        <-data.frame(Intraclase=numeric(),Algoritmo=character())
for (i in 1:CantidadAlgoritmos)
{
for (ii in 1:100)
{
Modelo      <- kmeans(Clientes4[1:3],4, algorithm = Algoritmos[i])
Iteraciones <- rbind(Iteraciones,
data.frame(Intraclase = Modelo$betweenss,
Algoritmo = Algoritmos[i]))
}
}
Resultados       <- tapply(Iteraciones$Intraclase,Iteraciones$Algoritmo,mean)
Resultados       <-sort(Resultados,decreasing = T)
AlgoritmoGanador <-names(Resultados[1])
KmeansOptimizado <- kmeans(Clientes4[1:3],4, algorithm = AlgoritmoGanador)
Clientes4$Grupo   <-KmeansOptimizado$cluster
plot(Clientes4$TOTALCAMPANAS,Clientes4$GANACIA,col=Clientes4$Grupo,cex.axis=.7,cex.lab=.7)
text(Clientes4$TOTALCAMPANAS,Clientes4$GANACIA,
labels=Clientes4$CUENTA,pos=1,col=Clientes4$Grupo,cex=.7)
title(main=paste("Algoritmo ganador:",AlgoritmoGanador),cex.main=.9)
write.csv(Clientes4,"C:/Users/isalopez/Desktop/ganancia_optimizado_4Clusters_sample.csv")
Clientes2 = scale(ClientesTot[2:4], center = TRUE, scale = TRUE)
Clientes3 <- remove_outliers(Clientes2)
head(Clientes3)
Clientes5 <- cbind(Clientes3,CUENTA=ClientesTot$CUENTA,GANANCIAREAL=ClientesTot$GANACIA,CAMAPANASREAL=ClientesTot$TOTALCAMPANAS,PARTICIPACIONREAL=ClientesTot$PARTICIPACION)
Clientes5 <- data.frame(Clientes5)
Clientes4 <- sample_n(na.omit(Clientes5), 10000)
Errores <-NULL
K_Max   <-9
for (i in 1:K_Max)
{
Errores[i] <- sum(kmeans(Clientes4[1:3], centers=i)$withinss)
}
plot(1:K_Max, Errores, type="b",
xlab="Cantidad de Cluster",
ylab="Suma de error")
Algoritmos         <-c("Hartigan-Wong","Lloyd","Forgy","MacQueen")
CantidadAlgoritmos <-length(Algoritmos) # guarda la cantidad de algoritmos usados
Iteraciones        <-data.frame(Intraclase=numeric(),Algoritmo=character())
for (i in 1:CantidadAlgoritmos)
{
for (ii in 1:100)
{
Modelo      <- kmeans(Clientes4[1:3],4, algorithm = Algoritmos[i])
Iteraciones <- rbind(Iteraciones,
data.frame(Intraclase = Modelo$betweenss,
Algoritmo = Algoritmos[i]))
}
}
for (i in 1:CantidadAlgoritmos)
{
for (ii in 1:100)
{
Modelo      <- kmeans(Clientes4[1:3],5, algorithm = Algoritmos[i])
Iteraciones <- rbind(Iteraciones,
data.frame(Intraclase = Modelo$betweenss,
Algoritmo = Algoritmos[i]))
}
}
Resultados       <- tapply(Iteraciones$Intraclase,Iteraciones$Algoritmo,mean)
Resultados       <-sort(Resultados,decreasing = T)
AlgoritmoGanador <-names(Resultados[1])
KmeansOptimizado <- kmeans(Clientes4[1:3],5, algorithm = AlgoritmoGanador)
Clientes4$Grupo   <-KmeansOptimizado$cluster
plot(Clientes4$TOTALCAMPANAS,Clientes4$GANACIA,col=Clientes4$Grupo,cex.axis=.7,cex.lab=.7)
text(Clientes4$TOTALCAMPANAS,Clientes4$GANACIA,
labels=Clientes4$CUENTA,pos=1,col=Clientes4$Grupo,cex=.7)
title(main=paste("Algoritmo ganador:",AlgoritmoGanador),cex.main=.9)
write.csv(Clientes4,"C:/Users/isalopez/Desktop/ganancia_5Clusters_centrado.csv")
source('DBConnection.r')
source('utils.R')
# install the xlsx package, if needed
# and load it into memory
ensure.loaded("dplyr")
ensure.loaded("cluster")
#Kmeans
#rs <- dbSendQuery(con,"select vf.cuenta,sum(vf.precio_folleto1) AS Ganacia,
#avon.sku_CampanaTot(AVON.sku_CampanaMax(vf.cuenta))-avon.sku_campanatot(avon.sku_CampanaMin(vf.cuenta))+1 as TotalCampanas,
#                  Round(avon.sku_CuentaCampana(vf.cuenta)/(avon.sku_CampanaTot(AVON.sku_CampanaMax(vf.cuenta))-avon.sku_campanatot(avon.sku_CampanaMin(vf.cuenta))+1),2) as Participacion
#                  from avon.view_Factura2013_2015_3 vf
#                  group by vf.cuenta")
#Funcion para outliers
remove_outliers <- function(x, na.rm = TRUE, ...) {
qnt <- quantile(x, probs=c(.001, .999), na.rm = na.rm, ...)
H <- 1.5 * IQR(x, na.rm = na.rm)
y <- x
y[x < (qnt[1] - H)] <- NA
y[x > (qnt[2] + H)] <- NA
y
}
#ClientesTot <- fetch(rs)
ClientesTot = read.csv("Valor_clientes.csv")
#Clientes$Grupo <- NULL
head(ClientesTot)
ClientesTot$CUENTA <- gsub(",","",ClientesTot$CUENTA)
ClientesTot$GANACIA <- gsub(",","",ClientesTot$GANACIA)
ClientesTot$TOTALCAMPANAS <- gsub(",","",ClientesTot$TOTALCAMPANAS)
ClientesTot$PARTICIPACION <- gsub(",","",ClientesTot$PARTICIPACION)
#Clientes<- transform(Clientes,NOMBRE = as.factor(Clientes$NOMBRE))
ClientesTot$CUENTA <- as.numeric(ClientesTot$CUENTA)
ClientesTot$GANACIA <- as.numeric(ClientesTot$GANACIA)
ClientesTot$TOTALCAMPANAS <- as.numeric(ClientesTot$TOTALCAMPANAS)
ClientesTot$PARTICIPACION <- as.numeric(ClientesTot$PARTICIPACION)
#Estandarizar y Escalar las variables y centrar
Clientes2 = scale(ClientesTot[2:4], center = TRUE, scale = TRUE)
#Sacar los outliers
Clientes3 <- remove_outliers(Clientes2)
head(Clientes3)
#Unimos a la matriz la informaciÃ³n original para mantener las variables originales, sin embargo no las tomamos en cuenta para hacer el kmeans.
Clientes5 <- cbind(Clientes3,CUENTA=ClientesTot$CUENTA,GANANCIAREAL=ClientesTot$GANACIA,CAMAPANASREAL=ClientesTot$TOTALCAMPANAS,PARTICIPACIONREAL=ClientesTot$PARTICIPACION)
Clientes5 <- data.frame(Clientes5)
head(Clientes5)
#Sacar la muestra
Clientes4 <- sample_n(na.omit(Clientes5), 10000)
#Calcular la cantidad de clusters
#------------------------------------------------------------------------------------
# Crea vector "Errores", sin datos
# Crea variable "K_Max" con la cant. maxima de k a analizar
Errores <-NULL
K_Max   <-9
#------------------------------------------------------------------------------------
# Ejecuta kmeans con diferentes cluster, desde 1 hasta 9
# Luego guarda el error de cada ejecucion en el vector "Errores"
for (i in 1:K_Max)
{
Errores[i] <- sum(kmeans(Clientes4[1:3], centers=i)$withinss)
}
#------------------------------------------------------------------------------------
# Grafica el vector "Errores"
plot(1:K_Max, Errores, type="b",
xlab="Cantidad de Cluster",
ylab="Suma de error")
#
#---------------------------------------------------------------------------------
# Creando los 3 Cluster o usando K-MEANS
#Luego asigna grupo a cada cliente en tabla Cliente
#ModeloKMEANS <- kmeans(Clientes[-1],3)
#Clientes$Grupo <- ModeloKMEANS$cluster
#---------------------------------------------------------------------------------
#Graficando los puntos de dispersi?n y luego asignando a cada punto etiquetas
#plot(Clientes$ANOSCONSULTORA,Clientes$GANANCIA,
#     col=Clientes$Grupo,cex.axis=.7,cex.lab=.7)
#text(Clientes$ANOSCONSULTORA,Clientes$GANANCIA,
#     labels=Clientes$CUENTA,pos=1,col=Clientes$Grupo,cex=.7)
#Salvando Datos , con el id del grupo
#write.csv(Clientes,"C:/Users/ricmorales/Desktop/BD/ganancia.csv")
#--------------------------------------------------------------#
# PASO 2: Crea vector con Algoritmos y tabla vacía para guardar Iteraciones
Algoritmos         <-c("Hartigan-Wong","Lloyd","Forgy","MacQueen")
CantidadAlgoritmos <-length(Algoritmos) # guarda la cantidad de algoritmos usados
Iteraciones        <-data.frame(Intraclase=numeric(),Algoritmo=character())
#-------------------------------------------------------------------------
# PASO 3: Ejecuta k-means 10 veces en cada algoritmo
# y guarda la Distancia Intracluster de cada iteracion en la tabla Iteraciones
for (i in 1:CantidadAlgoritmos)
{
for (ii in 1:100)
{
Modelo      <- kmeans(Clientes4[1:3],5, algorithm = Algoritmos[i])
Iteraciones <- rbind(Iteraciones,
data.frame(Intraclase = Modelo$betweenss,
Algoritmo = Algoritmos[i]))
}
}
#-------------------------------------------------------------------------
# PASO 4: Calcula la media de Distancia Intracluster en cada algoritmo
#  e identificar Algoritmo Ganador
Resultados       <- tapply(Iteraciones$Intraclase,Iteraciones$Algoritmo,mean)
Resultados       <-sort(Resultados,decreasing = T)
AlgoritmoGanador <-names(Resultados[1])
#-------------------------------------------------------------------------
# PASO 5: Ejecuta kmeans con algoritmo ganador y asigna grupo a cada cliente
KmeansOptimizado <- kmeans(Clientes4[1:3],5, algorithm = AlgoritmoGanador)
Clientes4$Grupo   <-KmeansOptimizado$cluster
KmeansOptimizado$centers
KmeansOptimizado$size
KmeansOptimizado$size,KmeansOptimizado$totss
KmeansOptimizado$size
KmeansOptimizado$totss
KmeansOptimizado$cen
KmeansOptimizado$size
KmeansOptimizado$centers
source('utils.R')
# install the xlsx package, if needed
# and load it into memory
ensure.loaded("data.table")
Zonas = read.csv("KmeansZona_outliers.csv")
zonastable <- data.frame(Zonas)
head(zonastable)
zonastable$Valor <-gsub(",","",zonastable$Valor)
zonastable$Saturacion <-gsub(",","",zonastable$Saturacion)
zonastable$Potencial <-gsub(",","",zonastable$Potencial)
zonastable$Homogeneidad <-gsub(",","",zonastable$Homogeneidad)
zonastable$Valor <-as.numeric(zonastable$Valor)
zonastable$Saturacion <-as.numeric(zonastable$Saturacion)
zonastable$Potencial <-as.numeric(zonastable$Potencial)
zonastable$Homogeneidad <-as.numeric(zonastable$Homogeneidad)
zonas2 = scale(zonastable[3:5], center = TRUE, scale = TRUE)
head(zonas2)
zonastable = cbind(zonas2,zona=zonastable$ZONA,homogeneidadReal=zonastable$Homogeneidad,valorReal=zonastable$Valor,saturacionReal=zonastable$Saturacion,potencialReal=zonastable$Potencial)
head(zonastable)
zonastable <- data.frame(zonastable)
Errores <-NULL
K_Max   <-9
#------------------------------------------------------------------------------------
# Ejecuta kmeans con diferentes cluster, desde 1 hasta 9
# Luego guarda el error de cada ejecucion en el vector "Errores"
for (i in 1:K_Max)
{
Errores[i] <- sum(kmeans(zonastable[1:3], centers=i)$withinss)
}
plot(1:K_Max, Errores, type="b",
xlab="Cantidad de Cluster",
ylab="Suma de error")
Algoritmos         <-c("Hartigan-Wong","Lloyd","Forgy","MacQueen")
CantidadAlgoritmos <-length(Algoritmos) # guarda la cantidad de algoritmos usados
Iteraciones        <-data.frame(Intraclase=numeric(),Algoritmo=character())
for (i in 1:CantidadAlgoritmos)
{
for (ii in 1:100)
{
Modelo      <- kmeans(zonastable[1:3],3, algorithm = Algoritmos[i])
Iteraciones <- rbind(Iteraciones,
data.frame(Intraclase = Modelo$betweenss,
Algoritmo = Algoritmos[i]))
}
}
Resultados       <- tapply(Iteraciones$Intraclase,Iteraciones$Algoritmo,mean)
Resultados       <-sort(Resultados,decreasing = T)
AlgoritmoGanador <-names(Resultados[1])
KmeansOptimizado <- kmeans(zonastable[1:3],3, algorithm = AlgoritmoGanador)
zonastable$Grupo   <-KmeansOptimizado$cluster
plot(zonastable$Homogeneidad,zonastable$Potencial,col=zonastable$Grupo,cex.axis=.7,cex.lab=.7)
text(zonastable$Homogeneidad,zonastable$Potencial,
labels=zonastable$ZONA,pos=1,col=zonastable$Grupo,cex=.7)
title(main=paste("Algoritmo ganador:",AlgoritmoGanador),cex.main=.9)
write.csv(zonastable,"C:/Users/ricmorales/Desktop/kmeans-zona.csv")
source('utils.R')
# install the xlsx package, if needed
# and load it into memory
ensure.loaded("data.table")
Zonas = read.csv("KmeansZona_outliers.csv")
zonastable <- data.frame(Zonas)
head(zonastable)
zonastable$Valor <-gsub(",","",zonastable$Valor)
zonastable$Saturacion <-gsub(",","",zonastable$Saturacion)
zonastable$Potencial <-gsub(",","",zonastable$Potencial)
zonastable$Homogeneidad <-gsub(",","",zonastable$Homogeneidad)
zonastable$Valor <-as.numeric(zonastable$Valor)
zonastable$Saturacion <-as.numeric(zonastable$Saturacion)
zonastable$Potencial <-as.numeric(zonastable$Potencial)
zonastable$Homogeneidad <-as.numeric(zonastable$Homogeneidad)
zonas2 = scale(zonastable[3:5], center = TRUE, scale = TRUE)
head(zonas2)
zonastable = cbind(zonas2,zona=zonastable$ZONA,homogeneidadReal=zonastable$Homogeneidad,valorReal=zonastable$Valor,saturacionReal=zonastable$Saturacion,potencialReal=zonastable$Potencial)
head(zonastable)
zonastable <- data.frame(zonastable)
#cor(zonastable[1:4])
#Calcular la cantidad de clusters
#------------------------------------------------------------------------------------
# Crea vector "Errores", sin datos
# Crea variable "K_Max" con la cant. maxima de k a analizar
Errores <-NULL
K_Max   <-9
#------------------------------------------------------------------------------------
# Ejecuta kmeans con diferentes cluster, desde 1 hasta 9
# Luego guarda el error de cada ejecucion en el vector "Errores"
for (i in 1:K_Max)
{
Errores[i] <- sum(kmeans(zonastable[1:3], centers=i)$withinss)
}
#------------------------------------------------------------------------------------
# Grafica el vector "Errores"
plot(1:K_Max, Errores, type="b",
xlab="Cantidad de Cluster",
ylab="Suma de error")
#
#---------------------------------------------------------------------------------
# Creando los 3 Cluster o usando K-MEANS
#Luego asigna grupo a cada cliente en tabla Cliente
#ModeloKMEANS <- kmeans(Clientes[-1],3)
#Clientes$Grupo <- ModeloKMEANS$cluster
#---------------------------------------------------------------------------------
#Graficando los puntos de dispersi?n y luego asignando a cada punto etiquetas
#plot(Clientes$ANOSCONSULTORA,Clientes$GANANCIA,
#     col=Clientes$Grupo,cex.axis=.7,cex.lab=.7)
#text(Clientes$ANOSCONSULTORA,Clientes$GANANCIA,
#     labels=Clientes$CUENTA,pos=1,col=Clientes$Grupo,cex=.7)
#Salvando Datos , con el id del grupo
#write.csv(Clientes,"C:/Users/ricmorales/Desktop/BD/ganancia.csv")
#--------------------------------------------------------------#
# PASO 2: Crea vector con Algoritmos y tabla vacía para guardar Iteraciones
Algoritmos         <-c("Hartigan-Wong","Lloyd","Forgy","MacQueen")
CantidadAlgoritmos <-length(Algoritmos) # guarda la cantidad de algoritmos usados
Iteraciones        <-data.frame(Intraclase=numeric(),Algoritmo=character())
#-------------------------------------------------------------------------
# PASO 3: Ejecuta k-means 10 veces en cada algoritmo
# y guarda la Distancia Intracluster de cada iteracion en la tabla Iteraciones
for (i in 1:CantidadAlgoritmos)
{
for (ii in 1:100)
{
Modelo      <- kmeans(zonastable[1:3],3, algorithm = Algoritmos[i])
Iteraciones <- rbind(Iteraciones,
data.frame(Intraclase = Modelo$betweenss,
Algoritmo = Algoritmos[i]))
}
}
#-------------------------------------------------------------------------
# PASO 4: Calcula la media de Distancia Intracluster en cada algoritmo
#  e identificar Algoritmo Ganador
Resultados       <- tapply(Iteraciones$Intraclase,Iteraciones$Algoritmo,mean)
Resultados       <-sort(Resultados,decreasing = T)
AlgoritmoGanador <-names(Resultados[1])
#-------------------------------------------------------------------------
# PASO 5: Ejecuta kmeans con algoritmo ganador y asigna grupo a cada cliente
KmeansOptimizado <- kmeans(zonastable[1:3],3, algorithm = AlgoritmoGanador)
zonastable$Grupo   <-KmeansOptimizado$cluster
#-------------------------------------------------------------------------
#PASO 6: Grafica segmentacion de algoritomo ganador y luego asigna etiquetas
plot(zonastable$Homogeneidad,zonastable$Potencial,col=zonastable$Grupo,cex.axis=.7,cex.lab=.7)
text(zonastable$Homogeneidad,zonastable$Potencial,
labels=zonastable$ZONA,pos=1,col=zonastable$Grupo,cex=.7)
title(main=paste("Algoritmo ganador:",AlgoritmoGanador),cex.main=.9)
write.csv(zonastable,"C:/Users/ricmorales/Desktop/kmeans-zona.csv")
