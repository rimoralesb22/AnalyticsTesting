{
    "contents" : "#K-means sample rows\nsource('DBConnection.r')\n\nsource('utils.R')\n\n# install the xlsx package, if needed\n# and load it into memory\nensure.loaded(\"dplyr\")\n\n#Kmeans\n\n#rs <- dbSendQuery(con,\"select vf.cuenta,sum(vf.precio_folleto1) AS Ganacia,\n#avon.sku_CampanaTot(AVON.sku_CampanaMax(vf.cuenta))-avon.sku_campanatot(avon.sku_CampanaMin(vf.cuenta))+1 as TotalCampanas,\n#                  Round(avon.sku_CuentaCampana(vf.cuenta)/(avon.sku_CampanaTot(AVON.sku_CampanaMax(vf.cuenta))-avon.sku_campanatot(avon.sku_CampanaMin(vf.cuenta))+1),2) as Participacion\n#                  from avon.view_Factura2013_2015_3 vf \n#                  group by vf.cuenta\")\n\n#ClientesTot <- fetch(rs)\nClientesTot = read.csv(\"Valor_clientes.csv\")\n#Clientes$Grupo <- NULL\nhead(ClientesTot)\n#Clientes<- transform(Clientes,NOMBRE = as.factor(Clientes$NOMBRE))\n\nClientes <- sample_n(Clientes, 1000)\n#Calcular la cantidad de clusters\n#------------------------------------------------------------------------------------\n# Crea vector \"Errores\", sin datos\n# Crea variable \"K_Max\" con la cant. maxima de k a analizar\nErrores <-NULL\nK_Max   <-9\n\n#------------------------------------------------------------------------------------\n# Ejecuta kmeans con diferentes cluster, desde 1 hasta 9\n# Luego guarda el error de cada ejecucion en el vector \"Errores\"\nfor (i in 1:K_Max)\n{\n  Errores[i] <- sum(kmeans(Clientes[2:4], centers=i)$withinss)\n}\n\n#------------------------------------------------------------------------------------\n# Grafica el vector \"Errores\"\nplot(1:K_Max, Errores, type=\"b\", \n     xlab=\"Cantidad de Cluster\", \n     ylab=\"Suma de error\")\n#\n#---------------------------------------------------------------------------------\n# Creando los 3 Cluster o usando K-MEANS\n#Luego asigna grupo a cada cliente en tabla Cliente\n#ModeloKMEANS <- kmeans(Clientes[-1],3)\n#Clientes$Grupo <- ModeloKMEANS$cluster\n\n#---------------------------------------------------------------------------------\n#Graficando los puntos de dispersi?n y luego asignando a cada punto etiquetas\n#plot(Clientes$ANOSCONSULTORA,Clientes$GANANCIA,\n#     col=Clientes$Grupo,cex.axis=.7,cex.lab=.7)\n\n#text(Clientes$ANOSCONSULTORA,Clientes$GANANCIA,\n#     labels=Clientes$CUENTA,pos=1,col=Clientes$Grupo,cex=.7)\n\n#Salvando Datos , con el id del grupo\n#write.csv(Clientes,\"C:/Users/ricmorales/Desktop/BD/ganancia.csv\")\n\n\n\n\n#--------------------------------------------------------------#\n# PASO 2: Crea vector con Algoritmos y tabla vacÃ­a para guardar Iteraciones\nAlgoritmos         <-c(\"Hartigan-Wong\",\"Lloyd\",\"Forgy\",\"MacQueen\") \nCantidadAlgoritmos <-length(Algoritmos) # guarda la cantidad de algoritmos usados\nIteraciones        <-data.frame(Intraclase=numeric(),Algoritmo=character())\n\n#-------------------------------------------------------------------------\n\n# PASO 3: Ejecuta k-means 10 veces en cada algoritmo\n# y guarda la Distancia Intracluster de cada iteracion en la tabla Iteraciones\nfor (i in 1:CantidadAlgoritmos) \n{\n  for (ii in 1:100) \n  {\n    Modelo      <- kmeans(Clientes[2:4],4, algorithm = Algoritmos[i])\n    Iteraciones <- rbind(Iteraciones,\n                         data.frame(Intraclase = Modelo$betweenss,\n                                    Algoritmo = Algoritmos[i]))\n  }\n}\n\n#-------------------------------------------------------------------------\n# PASO 4: Calcula la media de Distancia Intracluster en cada algoritmo\n#  e identificar Algoritmo Ganador \nResultados       <- tapply(Iteraciones$Intraclase,Iteraciones$Algoritmo,mean) \nResultados       <-sort(Resultados,decreasing = T)\nAlgoritmoGanador <-names(Resultados[1])\n\n#-------------------------------------------------------------------------\n# PASO 5: Ejecuta kmeans con algoritmo ganador y asigna grupo a cada cliente\nKmeansOptimizado <- kmeans(Clientes[2:4],4, algorithm = AlgoritmoGanador)\nClientes$Grupo   <-KmeansOptimizado$cluster\n\n#-------------------------------------------------------------------------\n\n#PASO 6: Grafica segmentacion de algoritomo ganador y luego asigna etiquetas\nplot(Clientes$TOTALCAMPANAS,Clientes$GANACIA,col=Clientes$Grupo,cex.axis=.7,cex.lab=.7)\ntext(Clientes$TOTALCAMPANAS,Clientes$GANANCIA,\n     labels=Clientes$CUENTA,pos=1,col=Clientes$Grupo,cex=.7)\ntitle(main=paste(\"Algoritmo ganador:\",AlgoritmoGanador),cex.main=.9)\n\nwrite.csv(Clientes,\"C:/Users/ricmorales/Desktop/BD/ganancia_optimizado_6Clusters_sample.csv\")",
    "created" : 1460997347245.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2275168079",
    "id" : "46FFAF8F",
    "lastKnownWriteTime" : 1461003043,
    "path" : "~/Analytics/GitHub/AnalyticsTesting/Proyecto Avon/K-means sample rows.r",
    "project_path" : "K-means sample rows.r",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 5,
    "source_on_save" : false,
    "type" : "r_source"
}